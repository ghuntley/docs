# Working with document identifiers

Each document in RavenDB database has a unique string associated with a document, called an identifier or a key. Every entity that you store either by using [a session](../session/what-is-a-session-and-how-does-it-work)
or with a [commands](../commands/what-are-commands) usage will have such identity assigned in the database. In RavenDB there are [three options](../../server/kb/document-key-generatation) supported by the server to store a document and assign to it an identifier.
The client can directly take advantage of them, what is mostly taking place when you use the command API. The second option is handling the key generation by using 
the knowledge about the type of the entity and the identity number provided by the HiLo algorithm. This is how the identifier is generated by the session, what is described in details below.

## Session usage

Choosing to use the session makes you don't have to pay any special attention to the identifiers of the stored entities. The session will take care of it by generating the keys automatically.
It utilizes [conventions]() and HiLo algorithm to produce the identifiers. Everything is handled by the session's mechanism and is transparent for the user. 
However you can influence the key generation strategy by overwriting [the key generation conventions](). In this article we are going to consider the behavior 
in accordance with the default conventions.

{INFO:Identifiers in RavenDB are strings}
Identifiers of documents in RavenDB database (server side) are always strings. RavenDB is designed to work with string identifiers and that is the best option you should choose
when you model your entities. You can still use numeric values or Guids and everything will work seamlessly, because RavenDB will automatically make the translation between 
the inner string id to the numeric or Guid value. However you can run into some issues caused by such entity model. Read more in [Beware of ...]() article.
{INFO/}


### Autogenerated ids

In order to figure out which property (or field) holds the entity's identifier the convention `Convenions.FindIdentityProperty` is called. 
By default it looks for the property or the field named `Id` (case sensitive). However this property can have `null` value or even can be not even present. Then the automatic key
generation strategy is performed. The default convention is that such entities get the keys in the following format `collection/number`. RavenDB client first determines
the name of [the collection](../faq/what-is-a-collection) that the entity belongs to and then contacts with the server to retrieve a numeric range of values that can be used as the `number` part.
The range of available numbers is calculated by using `HiLo` algorithm and it is tracked per collection. The current maximum value in ranges are stored in documents `Raven/Hilo/collectionName`.

Let's see the example.

{CODE session_id_not_provided@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

What will be the identifier of this order? You can check it by calling:

{CODE session_get_document_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

If this is the first `Order` entity in your database then it will return `orders/1`. How does the key generation process proceed? The RavenDB client determines the collection name as `orders` (by default it is the plural form of the entity name).
Then it asks the server for the `Raven/Hilo/orders` document, creates the numeric range by using HiLo (the first available range is 1 - 32) and updates the HiLo document on the server. The next available
identity value (always incrementing number) from the given range is `1` so its combination with the collection name gives the result `orders/1`.

The next attempt to store the another `Order` object within the same session would result in creating the `order/2` key. However this time asking the server about the HiLo document
would not be necessary because the in-memory range (1 - 32) is enough, so just the next number would be added as the key suffix.

If your intention is to skip the key creation strategy that relays on the collection and HiLo value pair, then you can allow the RavenDB database to assign the Guid identifier
to the stored document. Then you have to provide the `string.Empty` as the value of the `Id` property:

{CODE session_empty_string_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

Note that this time the check for the document id is called after `SaveChanges` because only then we go to the server while the entity's key will be generated there.

### Custom/semantic ids

The session also supports the option to store the entity and explicitly tell under what identifier it should be stored in the database. To to this you can either set the `Id` property of the object:

{CODE session_semantic_id_1@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

or use the following `Store` method overload:

{CODE session_semantic_id_2@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

### Identity ids

RavenDB also supports the notion of the identity without the usage of the HiLo. By creating a string Id property in your entity and setting it
to a value ending with a slash (`/`), you can tell RavenDB to use that as a key prefix for your entity. That prefix followed by the next available integer identity value will 
be your entity's key after calling `SaveChanges`. The identity value will be assigned by the server.

{CODE session_identity_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

After execution of the above example the first entity will get `companies/1` key and the second one `companies/2`. The identity values are stored per prefix. 
Here according to the default conventions we used the collection name as the prefix. Note that in result we got the same results like we used the auto-generated keys with 
the the HiLo usage. The difference is that the in this case both identity numbers were generated on the server side.

{INFO:Prefix convention}
Note the we used `companies/` as the prefix just to follow the RavenDB convention. However nothing stands in the way to provide the different prefix, 
which will be completely unrelated to the collection name.
{INFO/}

{INFO:Concurrent writes}
The identities are generated and updated on the server side in the atomic fashion. So you can safety use this approach in the concurrent writes scenario.
{INFO/}

{WARNING:Mixing key generation approaches}
You should never mix the identity key generation strategy with the auto-generated identifiers based on the HiLo algorithm within the same session. You might run into concurrency issues.

From the other side you are allow to mix the manually assigned keys and the identity ids that starts with `/`. RavenDB is aware of the existing document keys, so in example
if you save the entity with `companies/1` ID and then the another one by specifying `companies/` as the key, then RavenDB will set the first free identity value for a given prefix,
so in this case the second one will be stored under `companies/2` key.
{WARNING/}

## Commands usage

The use of the commands API gives you the full freedom for selecting the key generation strategy. The same like for the session, you can either ask the server to provide the key or manually provide
the identifier of the stored entity.

### Autogenerated Guids

When you add a new document you can pass `null` as the key parameter of `PUT` method:

{CODE commands_autogenerated_guid@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

in result the server will assign the Guid identifier that you can retrieve by `PutResult.Key` property.

### Identity ids

The same like for the session you can indicate that the identifier that you are passing needs to have the identity suffix added. You have to mark it by ending the key by `/` character:

{CODE commands_identity@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

By using the commands you can manage to build identity keys on the client but still relaying on the server side identity generator. You just need to point out for which prefix
you want to fetch the next available identity number. Look at the example:

{CODE commands_identity_generate@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

Note that such construction requires to go to the server twice in order to add a single document. The call of `DatabaseCommands.NextIdentityFor` is necessary for every
entity you want to store. Asking the server about the next identity results in increasing this value on the server side. You cannot just get the next available identity and 
use it to create the identifiers for the whole collection of the same type objects by locally incrementing this value because you can accidentally overwrite the document or get a
conflict exception if someone else is doing putting documents by using the identity mechanism.

There is even a command that allows you to set the identity value for a given prefix:

{CODE commands_identity_set@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

