#Document key generatation

A document key (also called a document identifier) is a unique string associated with a document and allows to differ the document from the other ones.
There are two limitations for document identifiers:

* Maximum allowed length is 1023 unicode characters
* Cannot contain `\` character

RavenDB server supports three document key generation strategies. Their below descriptions refer purely to server side behavior. Their knowledge is mostly important 
when you save document by using REST API, however RavenDB client also takes advantage of them, so it's good to know how it works under the hood.

##Autogenerated GUID

When a document key is not specified, Raven will generate a globally unique identifier (`Guid`) for the stored document. This approach can be used when you don't care for 
the document key, such as when saving log entries, or when the user will never be exposed to the document key.

##Semantic key

The problem with Guids is that they are not human friendly. They are very hard to read, compare etc. The much better option is to have ids that contain useful information about the documents.
You know the best what you need and how your keys should look so you can decide what id the document will have before saving it. Then RavenDB will use the assigned key.
Common cases for this are when you save documents which already have native id, such as users, when you can use keys like `users/ayende`.

##Identity key

If you want to have keys that contains are contains some useful info about the document but you also need to have consecutive ids then identity keys are the option for you.
The you can allow RavenDB to take care of making your keys sequential by adding the incremented number value at the end of the key. In order to use this option you need to follow the convention
that the key you specify during save ends with a slash (`/`). Raven will automatically start tracking identity numbers for the prefix if it doesn't exist and append the current identity value to the key. 
Let's see the example:

{CODE-BLOCK:plain}
SAVE 'users/' -> will assign 'users/1'
SAVE 'users/' -> will assign 'users/2'
{CODE-BLOCK/}

Raven keeps internally the relation between the prefix and the current identity value, so it is also able to deal with scenario that you mix the identity keys usage and 
manual key generation:

{CODE-BLOCK:plain}
SAVE 'users/1'
SAVE 'users/' -> will assign 'users/2'
{CODE-BLOCK/}

This approach is recommended for most scenarios, since it produces keys that are human readable. 

## Related articles

- [Working with document identifiers](../../client-api/document-identifiers/working-with-document-ids)